var documenterSearchIndex = {"docs":
[{"location":"motifs/#Motifs:-shapes-and-sampling","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"","category":"section"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"The library supports different motif shapes and sampling modes. Here, we present a brief explanation of how these mechanisms work and how you can create your own shape or sampling mode.","category":"page"},{"location":"motifs/#Shapes","page":"Motifs: shapes and sampling","title":"Shapes","text":"","category":"section"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"By default, the library includes five predefined motif shapes: :square, :triangle, :pair, :line, and :diagonal. These shapes are defined in the file src/rma/index.jl, and they determine how a motif is drawn by the library and how it is converted to a decimal value used as an index. Therefore, when constructing a motif shape, it is important to consider how it will be converted into a decimal value.","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"For example, a square motif can be converted into a decimal value using the following equation (without spatial generalization).","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"I = sum_r = 0^n - 1sum_c = 0^n - 1 2^rn+cmathbfR_i+r j+c","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"where 2^rn+c is responsible for associating each position of the motif with a power of 2, converting the binary structure into a decimal value. A Julia's function to compute it can be written as:","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"function compute_index_square(x::AbstractArray, y::AbstractArray, parameters, structure::AbstractVector{Int}, func::F, dim::AbstractVector{Int}, fixed::Vector{Int}, itr::Vector{Int}, metric) where {F}\n\n    ##      Let a variable to store the index.\n    I = 0\n\n    ##      Copy the values of the fixed indeces to the vector of iterative indeces.\n    copy!(itr, fixed)       ##  We do it to avoid memory allocations =D\n\n    ##      Iterate to compute the index.\n    for r in 0:(structure[1] - 1)\n        for c in 0:(structure[2] - 1)\n            ##      Change the iterator.\n            itr[1] = fixed[1] + r\n            itr[2] = fixed[2] + c\n\n            ##      Calculate the recurrence between two positions.\n            if @inline func(x, y, parameters, itr, metric, dim)\n                index += 2^((r * structure[1]) + c)\n            end\n        end\n    end\n\n    return I + 1 ##     It is necessary for Julia indexing! i = I + 1\nend","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"Knowing an algebraic expression to convert a motif into a decimal value is not strictly necessary, but it is recommended — especially considering the importance of understanding how this process will work for any value of n (if applicable). For example, consider a motif with an X-shape (for n = 3):","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"beginpmatrix\nxi_1            xi_2    \n         xi_3            \nxi_4            xi_5\nendpmatrix","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"It is easy to convert this shape into an index using something like:","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"function compute_index_x(x::AbstractArray, y::AbstractArray, parameters, func::F, dim::AbstractVector{Int}, fixed::Vector{Int}, itr::Vector{Int}, metric) where {F}\n\n    ##      Let a variable to store the index.\n    I = 0\n\n    ##      Copy the values of the fixed indeces to the vector of iterative indeces.\n    copy!(itr, fixed)       ##  We do it to avoid memory allocations =D\n\n    ##  1. \\xi_1\n    if @inline func(x, y, parameters, itr, metric, dim)\n        I += 1\n    end\n\n    ##  2. \\xi_2\n    itr[2] = fixed[2] + 2\n    if @inline func(x, y, parameters, itr, metric, dim)\n        I += 2\n    end\n\n    ##  3. \\xi_3\n    itr[1] = fixed[1] + 1\n    itr[2] = fixed[2] + 1\n    if @inline func(x, y, parameters, itr, metric, dim)\n        I += 4\n    end\n\n    ##  4. \\xi_4\n    itr[1] = fixed[1] + 2\n    itr[2] = fixed[2]\n    if @inline func(x, y, parameters, itr, metric, dim)\n        I += 8\n    end\n\n    ##  5. \\xi_5\n    itr[2] = fixed[2] + 2\n    if @inline func(x, y, parameters, itr, metric, dim)\n        I += 16\n    end\n\n    return I + 1 ##     It is necessary for Julia indexing! i = I + 1\nend","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"But it is also clear that this code is not scalable, as it relies on a fixed structure. Transforming this into a scalable version that can handle any motif structure is one of the key computational challenges in the process of defining a new motif shape.","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"The application of a shape is associated with a sampling mode, so it is necessary to create a sampling function for each defined shape. This is because the sampling mode determines how the fixed parameter is set.","category":"page"},{"location":"motifs/#Sampling","page":"Motifs: shapes and sampling","title":"Sampling","text":"","category":"section"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"The sampling defines how each motif will be extracted from an RP, without computing the full RP explicitly. The library includes five predefined sampling modes: :full, :random, :triangleup, :columnwise and :columnwise_full. These modes are defined in the folder src/rma/histograms/, being called by the function distribution(...).","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"The difficulty of creating a sampling function is proportional to the complexity of your problem. For example, if you are sampling motifs randomly from the RP, the sampling function is simple. However, if the motifs need to be extracted from a specific structure, the difficulty increases.","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"The sampling code for a :random sampling using square motifs is","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"function vect_square_random(x::AbstractArray, y::AbstractArray, parameters, structure::AbstractVector{Int},\n    space_size::AbstractVector{Int}, func::F, dim::AbstractVector{Int}, hv::Int, samples::Int, metric) where {F}\n\n    ##\n    ##      Alloc memory for the histogram and the index list.\n    hg = zeros(Int, 2^hv)   ##  Our histogram!\n    fixed = ones(Int, length(space_size))\n    itr = zeros(Int, length(space_size))\n\n    ##\n    ##      Compute the power vector.\n    p_vect = zeros(Int, hv)\n    for i in 1:hv\n        p_vect[i] = 2^(i - 1)\n    end\n\n    ##\n    ##      Get the samples and compute the histogram.\n    @inbounds for _ in 1:samples\n        ##\n        ##      Take a random index.\n        for s in eachindex(space_size)\n            fixed[s] = rand(1:space_size[s])\n        end\n\n        ##\n        ##      Compute the index and register the motif.\n        p = @fastmath compute_index_square(x, y, parameters, structure, func, dim, fixed, itr, p_vect, metric)\n        hg[p] += 1\n    end\n\n    ##\n    ##      Return the histogram.\n    return hg\nend","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"In this code, we compute the power vector (p_vect) before calling the compute_index_square function, so it is not necessary to calculate powers of 2 inside the loop. Moreover, we allocate memory for the iterator itr and the fixed indices fixed outside the loop to avoid unnecessary calls to the garbage collector. The for...","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"for s in eachindex(space_size)\n    fixed[s] = rand(1:space_size[s])\nend","category":"page"},{"location":"motifs/","page":"Motifs: shapes and sampling","title":"Motifs: shapes and sampling","text":"... retrieves an index set (ij) to define the first recurrence R_ij, , from which a motif is constructed using the shape function compute_index_square.","category":"page"},{"location":"distributions/#Recurrence-Motifs-Probability-Distributions","page":"Distributions","title":"Recurrence Motifs Probability Distributions","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"RecurrenceMicrostatesAnalysis.jl aims to be a user-friendly library with powerful capabilities. It can be used through simple function calls or more advanced configurations that offer greater control. We will begin with the simpler usage, explaining its arguments and settings, and gradually move toward more complex configurations throughout this discussion.","category":"page"},{"location":"distributions/#One-dimensional-data","page":"Distributions","title":"One-dimensional data","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"This section presents a run similar to the one shown on the quick start page, but with a more detailed explanation. For one-dimensional problems, such as the logistic map or the generalized Bernoulli shift map (Beta-X), you can use a vector of positions along the trajectory as input. To illustrate this, let's consider a uniform distribution:","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"using Distributions\ndata = rand(Uniform(0, 1), 3000)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"Computing the recurrence motif distribution is straightforward once the threshold and n (motif size) parameters are defined. A good value for threshold can be estimated using the find_parameters function, which we recommend using in most cases.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"using RecurrenceMicrostatesAnalysis\nth, s = find_parameters(data, 3)\ndist = distribution(data, th, 3)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"warning: Warning\nWe do not recommend the use of find_parameters inside a loop, as it needs to compute several distributions to find the threshold value that maximizes recurrence entropy, which can significantly reduce the library's performance. For this reason, we have not created an overload of the distribution function that automatically calculates the threshold. Instead, we suggest using an average threshold value computed from a few representative snippets of your dataset using the find_parameters function.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"The distribution function includes several keyword arguments for configuration. Before moving on to the next section, we will discuss these arguments, as they apply to every call of the distribution function.","category":"page"},{"location":"distributions/#Motif-constrained-shape","page":"Distributions","title":"Motif constrained shape","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"There are variations in motif constraint shapes proposed in the literature, such as the triangular motif. Supporting these shape generalizations is one of the goals of RecurrenceMicrostatesAnalysis.jl, and it is also a computational challenge. Adapting the conversion of motifs with a generic shape from a binary structure to a decimal value can be a very complex problem, and to support this in the library, we need to adapt the pipeline that converts a motif for each specific shape.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"Currently, RecurrenceMicrostatesAnalysis.jl supports five shapes: square, triangle, diagonal, line, and pair. The way the library converts these motifs constrained shapes to decimal values is detailed on the motifs page. You can change the shape using the kword shape, which can be set to :square, :triangle, :diagonal, :line, or :pair. By default, the library uses :square as the default shape.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"dist = distribution(data, th, 3; shape = :triangle)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"note: Note\nThe shape :pair doesn't require a value of n, since it always uses n=2. However, it is still necessary to informe a value to this parameter, that will be interpreted as the separation between two points in a diagonal.dist = distribution(data, th, 6; shape = :pair)When workign with shape :pair, we recommend you to use the full structure of distribution function.structure = [3, 9]\ndist = distribution(data, data, th, structure; shape = :pair)Here, structure defines the position of the second element based on the random position of the first element.","category":"page"},{"location":"distributions/#Motifs-sampling","page":"Distributions","title":"Motifs sampling","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"The sampling mode defines how RecurrenceMicrostatesAnalysis.jl selects motifs from a recurrence space. Currently, the library supports four sampling modes: full, random, columnwise and triangle up. You can learn more about them on the motifs page, where we discuss how each mode works. The sampling mode can be configured using the keyword argument sampling_mode, which can be set to :full, :random, :columnwise, :columnwise_full, or :triangleup. By default, the library uses :random as the default sampling mode.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"dist = distribution(data, th, 3; sampling_mode = :full)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"compat: Compat\nNot all sampling modes are compatible with certain motif constrained shapes, and the following table illustrates the compatibility between them. :full :random :columnwise :columnwise_full :triangleup\n:square checkmark checkmark checkmark checkmark checkmark\n:triangle checkmark checkmark   \n:diagonal  checkmark   \n:time  checkmark   \n:pair  checkmark checkmark  ","category":"page"},{"location":"distributions/#Run-mode","page":"Distributions","title":"Run mode","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"RecurrenceMicrostatesAnalysis.jl has two run modes that results in a different output type. The run mode :vect allocates all required memory in beginning of the process, and return the distribution as a vector. This is the default configuration of the library for n  6.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"dist = distribution(data, th, 4; run_mode = :vect)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"The run mode :dict uses dictionaries to allocate memory just when needed. The total allocation of dictionary mode can be greater than when using vectors, but the real memory allocation is smaller.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"dist = distribution(data, th, 4; run_mode = :dict)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"compat: Compat\nIt is important to note that the shapes :diagonal, :line, and :pair are not compatible with run mode :dict. Additionally, sampling modes :columnwise and :columnwise_full return a matrix in which each column represents a probability distribution for a specif time value.dist = distribution(data, th, 2; sampling_mode = :columnwise)\ndist = distribution(data, th, 2; sampling_mode = :columnwise_full)","category":"page"},{"location":"distributions/#Number-of-samples","page":"Distributions","title":"Number of samples","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"With exception of sampling modes :full and :columnwise_full, all sampling modes take motifs randomly in a recurrence space. The kword num_samples defines the number of samples that will be used by the library, it can be either an integer value that specifies the exact number, or a decimal value interpreted as the percentage of samples taken from the entire available population. By default, RecurrenceMicrostatesAnalysis.jl uses 5.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"dist = distribution(data, th, 3; num_samples = 0.1)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"dist = distribution(data, th, 3; num_samples = 50000)","category":"page"},{"location":"distributions/#Threads","page":"Distributions","title":"Threads","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"RecurrenceMicrostatesAnalysis.jl is highly compatible with CPU asynchronous jobs, that can increase significantly the computational performance of the library. The kword threads defines if the library will use threads or not, being true by default. The number of threads used is equal to the number of threads available to Julia, being it configured by the environment variable JULIA_NUM_THREADS, or by the running argument --threads T in Julia initiation: For example, using julia --threads 8.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"using BenchmarkTools\n@benchmark distribution(data, th, 4; sampling_mode = :full, threads = false)\n@benchmark distribution(data, th, 4; sampling_mode = :full, threads = true)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"warning: Warning\nRecurrenceMicrostatesAnalysis.jl allocates memory for each thread, so how many threads you use, more memory the library will allocate. It is done to increase the performance, and avoid the memory concurrency.","category":"page"},{"location":"distributions/#Metrics","page":"Distributions","title":"Metrics","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"RecurrenceMicrostatesAnalysis.jl uses the library Distances.jl to simplify the configuration of metrics, and increase the computation performance. With it, modify the metric is a easy process that can be done with the kword metric.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"using Distances\nmy_metric = KLDivergence()\ndist = distribution(data, th, 2; metric = my_metric)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"warning: Warning\nThe default recurrence functions were configured to metrics with two arguments, like euclidean(x, y), so if you need to use another type of metric, it is needed to define a new recurrence function, see Recurrence functions page to know more about it.","category":"page"},{"location":"distributions/#Recurrence-functions","page":"Distributions","title":"Recurrence functions","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"A recurrence function defines if two points of a trajectory recurr or not. Actually the library have two recurrence functions available","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"Standard recurrence: R(mathbfx mathbfy)=Theta(varepsilon - mathbfx-mathbfy)\nRecurrence with corridor threshold: R(mathbfx mathbfy)=Theta(mathbfx-mathbfy - varepsilon_min) cdot Theta(varepsilon_max - mathbfx-mathbfy)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"RecurrenceMicrostatesAnalysis.jl automatically change between them with the type of parameters, so if you use as parameter a Float64, the library will apply the standard recurrence, or, if you use a Tuple{Float64, Float64}, the library will apply the recurrence with corridor threshold.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"dist = (distribution(data, th, 2))'\ndist = (distribution(data, (0.0, th), 2))'","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"It is possible to write your own recurrece function, we talk more about it in the Recurrence functions page.","category":"page"},{"location":"distributions/#High-dimensionality-data","page":"Distributions","title":"High-dimensionality data","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"If you are working with a dynamical system or a data time serie with two or more dimensions, it is important to note that RecurrenceMicrostatesAnalysis.jl effectively not works with vectors, but matrices. In this situation, each row of the matrix will represent a coordinate, and each column a set of coordinates along a trajectory. For example, if we want a uniform distribution with three dimension and 3,000 points, we will have something like:","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"using Distributions\ndata = rand(Uniform(0, 1), 3, 3000)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"This format of data is effectvely what the library uses. In the case of previous section, when we are working with vectors, RecurrenceMicrostatesAnalysis.jl converts it to a matrix 1times 3000 but when we are working which data with a dimensionality different than one, it is necessary to use the proper format.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"using RecurrenceMicrostatesAnalysis\nth, s = find_parameters(data, 3)\ndist = distribution(data, th, 3)","category":"page"},{"location":"distributions/#Continuous-problems","page":"Distributions","title":"Continuous problems","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"Continuous problems means numerically integrate a differential equation problem and take the values as input to RecurrenceMicrostatesAnalysis.jl. Thinking in it, we make the library compatible with a powerful tool to solve these problems in Julia: the library DifferentialEquations.jl. The way to apply this kind of data in the library is similar with the other two cases discussed before, as we will demonstrate in this section. ","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"info: Info\nThe code of Lorenz system used in these examples was get from Example 2 of DifferentialEquations.jl documentation","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"function lorenz!(du, u, p, t)\n    du[1] = 10.0 * (u[2] - u[1])\n    du[2] = u[1] * (28.0 - u[3]) - u[2]\n    du[3] = u[1] * u[2] - (8 / 3) * u[3]\nend\n\nusing DifferentialEquations\nu0 = [1.0; 0.0; 0.0]\ntspan = (0.0, 1000.0)\nprob = ODEProblem(lorenz!, u0, tspan)\nsol = solve(prob)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"With the data computed, it is easy to apply to RecurrenceMicrostatesAnalysis.jl, with a simply memory access given by DifferentialEquations.jl.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"using RecurrenceMicrostatesAnalysis\ndata = sol[:, :]\nth, s = find_parameters(data, 3)\ndist = distribution(data, th, 3)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"warning: Warning\nAlthough it is possible to compute the distribution as demonstrated above, we strongly advise against doing so in this way.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"We recommend you to apply a transient into your data and take a correct time resolution while doing the process of discretization, it is needed to maximize the information available. RecurrenceMicrostatesAnalysis.jl has a utilitary function to help with this process.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"prepared_data = prepare(sol, 0.2; transient = 10000, K = 1000)\nth, s = find_parameters(prepared_data, 3)\ndist = distribution(prepared_data, th, 3)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"If you have the threshold parameter, it is also possible to simplify the call using:","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"dist = distribution(sol, th, 3, 0.2; transient = 10000, K = 1000)","category":"page"},{"location":"distributions/#Spatial-data","page":"Distributions","title":"Spatial data","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"RecurrenceMicrostatesAnalysis.jl is compatible with generalised recurrence plot analysis for spatial data proposed by Marwan, Kurths and Saparin at 2006 [9]. It allow the library to calculate a probability distribution of motifs in a tensorial recurrence space, for example, to images the recurrence space have four dimensions.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"todo: Todo\nSince this is an open research field, the library is designed to support exploration and estimation for research purposes. We don’t recommend applying it in production environments 😉","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"The application of RecurrenceMicrostatesAnalysis.jl to spatial data is very similar to the others presented before, but the input format is more complex. Instead to matrices we need to use abstract arrays with dimension D, where the first dimension will be interpreted as a coordinate dimension (such as for high-dimensionaly data), and rest of the dimensions will be the spatial data dimensionality. To illustrate it, let an image with RGB. It can be represented as an abstract array with 3 dimensions, where the first dimension will have a length 3, being each element a color value (red, blue and green), and the others two dimensions are relative to each pixel that compose the image. We will demonstrate it using a uniform distribution, where each position can be interpreted as a RGB pixel for an image 100x100.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"using Distributions\ndata = rand(Uniform(0, 1), 3, 100, 100)","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"When we work with spatial data is necessarity to use the complete structure of distribution function, defining a vector structure where each value represents the length of a motif constrained side. For example, to a square tensorial motif constrained with side 2, we can use:","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"using RecurrenceMicrostatesAnalysis\ndist = distribution(data, data, 0.5, [2, 2, 2, 2])","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"Since the recurrence space has four dimensions, in this examples, it is necessary for structure has the same number of elements, where each element will represent the motif' side lenght for each dimension.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"warning: Warning\nThe find_parameters function is not compatible with spatial data.","category":"page"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"compat: Compat\nIt is important to note that this functionality is only available to motif shapes :square, :diagonal, :line and :pair, for :random sampling mode.","category":"page"},{"location":"performance/#Performance-tips-to-use-RecurrenceMicrostatesAnalysis.jl","page":"Performance Tips","title":"Performance tips to use RecurrenceMicrostatesAnalysis.jl","text":"","category":"section"},{"location":"performance/","page":"Performance Tips","title":"Performance Tips","text":"One of the main goals of RecurrenceMicrostatesAnalysis.jl is its computational performance, being fast and light. For it, RecurrenceMicrostatesAnalysis.jl has a good memory managment, allocating only the necessary memory, and a good adaptability to multi-threading jobs, spliting the work between all available threads. For that, we recommend to always use threads = true with the distribution function, and define a number of threads different than one in the enverionment variable JULIA_NUM_THREADS, or openning julia using julia --threads 8.","category":"page"},{"location":"performance/","page":"Performance Tips","title":"Performance Tips","text":"It is crucial to note that how much larger is a dataset, more time is needed to the library compute a recurrence motif distribution, and the number of samples can also affect it. (Image: CPU Performance)","category":"page"},{"location":"performance/","page":"Performance Tips","title":"Performance Tips","text":"With respect of memory consumition, RecurrenceMicrostatesAnalysis.jl has even better performance, being extremally light. The library allocates only the necessary memory to store information, such as a vector with the number of each motif that there is in some recurrence space. It is possible to see in the following graphic the library memory usage when compared with standard approach.  (Image: RAM Performance)","category":"page"},{"location":"performance/","page":"Performance Tips","title":"Performance Tips","text":"RecurrenceMicrostatesAnalysis.jl allocates memory for each thread, so when you increase the number of available threads, the library will allocate more memory to avoid concurrency. It is also necessary to allocate more memory when we increase the motif size n, that is based on the motif area sigma (our hypervolume for spatial generalization), so largest motifs needs more memory per thread.","category":"page"},{"location":"performance/","page":"Performance Tips","title":"Performance Tips","text":"These measures were made using the library BenchmarkTools.jl.","category":"page"},{"location":"performance/","page":"Performance Tips","title":"Performance Tips","text":"using Distributions, RecurrenceMicrostatesAnalysis, BenchmarkTools\ndata = rand(Uniform(0, 1), 10000);\n@benchmark distribution(data, 0.27, 3)\n@benchmark distribution(data, 0.27, 3; sampling_mode = :full)\n@benchmark distribution(data, 0.27, 4)\n@benchmark distribution(data, 0.27, 4; sampling_mode = :full)","category":"page"},{"location":"rqa/#Recurrence-Quantification-Analysis","page":"RQA","title":"Recurrence Quantification Analysis","text":"","category":"section"},{"location":"rqa/","page":"RQA","title":"RQA","text":"The recurrence microstate analysis allows us to estimate values of typical RQA measures, such as determinism and laminarity, with a good precision, and defines some novel quantifiers. We will demonstate in this page how compute these quantifiers using a uniform distribution as input.","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"using RecurrenceMicrostatesAnalysis, Distributions        # Generate our data =D\ndata = rand(Uniform(0, 1), 3000);\nth, s = find_parameters(data, 3)\ndist = distribution(data, th, 3);","category":"page"},{"location":"rqa/#Recurrence-Entropy","page":"RQA","title":"Recurrence Entropy","text":"","category":"section"},{"location":"rqa/","page":"RQA","title":"RQA","text":"To compute the recurrence entropy, it is possible to use the rentropy function that receives a recurrence motif probability distribution.","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"entr = rentropy(dist)","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"info: Info\nNote that the entropy computed is also returned by the find_parameters function.","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"The rentropy function has also a keyword argument that can be used to ignore some motifs.","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"entr = rentropy(dist; ignore_motifs = [1, 512])","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"info: Info\nNote that the kword ignore_motifs uses as index the notation of Julia, beginning in 1, instead 0. So, the motif 0 is identified by the number 1.","category":"page"},{"location":"rqa/#Recurrence-Rate","page":"RQA","title":"Recurrence Rate","text":"","category":"section"},{"location":"rqa/","page":"RQA","title":"RQA","text":"The recurrence rate (RR) can be computed using a similar method to the recurrence entropy.","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"rr = rrate(dist)","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"Since the recurrence rate is an estimated measure, it has a small error, how you can check in the following graphic, that displays the relative error between the RR computed by RecurrenceMicrostatesAnalysis.jl and the standard approach. (Image: Relative error of recurrence rate compared to the value computed using the standard method. Panel (f) provides an overview of the error distributions presented in panels (a)-(e).)","category":"page"},{"location":"rqa/#Determinism","page":"RQA","title":"Determinism","text":"","category":"section"},{"location":"rqa/","page":"RQA","title":"RQA","text":"The determinism (DET) can be computed using a recurrence motifs probability distribution and the recurrence rate. It is important to note that it can be done using two motif constrained shapes: :square or :diagonal.","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"det = determinism(rr, dist)\ndet = determinism(rr, distribution(data, th, 3; shape = :diagonal))","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"Similar to RR, the determinism is a quantifier estimated using recurrence microstates analysis, so it has a small error that is demonstrated in the following figure. (Image: Relative error of determinism compared to the value computed using the standard method.)","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"info: Info\n(i) is the uniform distribution, (ii) is the Lorenz system, (iii) is the Logistic map, (iv) is the Rössler system, and (v) is the Bernoulli shifted generalized.","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"warning: Warning\nDeterminism (DET) just can be computed using :square or :diagonal shapes.","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"We implement an way to do it without the need to compute the recurrence distributions.","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"det = determinism(data, th)","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"info: Info\nWhen we estimate DET directly using this function overload, the library will automatically use a diagonal motif constrained shape.","category":"page"},{"location":"rqa/#Laminarity","page":"RQA","title":"Laminarity","text":"","category":"section"},{"location":"rqa/","page":"RQA","title":"RQA","text":"The laminarity (LAM) can be computed with a method similar to determinism (DET). It is important to note that it can be done using two motif constrained shapes: :square or :line.","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"lam = laminarity(rr, dist)\nlam = laminarity(rr, distribution(data, th, 3; shape = :line))","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"In the same way, laminarity has a small error associated to it estimation. You can check it in the next figure. (Image: Relative error of laminarity compared to the value computed using the standard method.)","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"info: Info\n(i) is the uniform distribution, (ii) is the Lorenz system, (iii) is the Logistic map, (iv) is the Rössler system, and (v) is the Bernoulli shifted generalized.","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"warning: Warning\nLaminarity (LAM) just can be computed using :square or :line shapes.","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"We implement an way to do it without the need to compute the recurrence distributions.","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"lam = laminarity(data, th)","category":"page"},{"location":"rqa/","page":"RQA","title":"RQA","text":"info: Info\nWhen we estimate LAM directly using this function overload, the library will automatically use a line motif constrained shape.","category":"page"},{"location":"bib/#Bibliography","page":"Bibliography","title":"Bibliography","text":"","category":"section"},{"location":"bib/","page":"Bibliography","title":"Bibliography","text":"N. Marwan, M. C. Romano, M. Thiel and J. Kurths. Recurrence plots for the analysis of complex systems. Physics Reports 438, 237–329 (2007).\n\n\n\nJ.-P. Eckmann, S. O. Kamphorst and D. Ruelle. Recurrence Plots of Dynamical Systems. Europhysics Letters 4, 973–977 (1987).\n\n\n\nC. L. Webber and N. Marwan. Recurrence Quantification Analysis: Theory and Best Practices (Springer, Cham, 2014).\n\n\n\nG. Corso, T. Lima Prado, G. Z. Santos Lima, J. Kurths and S. R. Lopes. Quantifying Entropy Using Recurrence Matrix Microstates. Chaos 28 (2018).\n\n\n\nY. Hirata. Recurrence plots for characterizing random dynamical systems. Communications in Nonlinear Science and Numerical Simulation 94 (2021).\n\n\n\nG. S. Spezzatto, J. V. Flauzino, G. Corso, B. R. Boaretto, E. E. Macau, T. Lima Prado and S. R. Lopes. Recurrence Microstates for Machine Learning Classification. Chaos 34, 073140 (2024).\n\n\n\nG. Marghoti, T. d. Prado, S. R. Lopes and Y. Hirata. Involution Symmetry Quantification Using Recurrences. Physical Review E 110 (2024).\n\n\n\nF. E. da Cruz, T. d. Prado, S. R. Lopes, N. Marwan and J. Kurths. Density-based recurrence measures from microstates. Physical Review E 111 (2025).\n\n\n\nN. Marwan, J. Kurths and P. Saparin. Generalised Recurrence Plot Analysis for Spatial Data. Physics Letters A 360, 545–551 (2007).\n\n\n\nT. L. Prado, V. S. Machado, G. Corso, G. Z. Lima and S. R. Lopes. How to Compute Suitable Vicinity Parameter and Sampling Time of Recurrence Analysis. SSRN (2023).\n\n\n\nJ. S. Iwanski and E. Bradley. Recurrence Plots of Experimental Data: To Embed or Not to Embed? Chaos 8, 861–871 (1998).\n\n\n\n","category":"page"},{"location":"utils/#Utilitary-functions","page":"Utils","title":"Utilitary functions","text":"","category":"section"},{"location":"utils/","page":"Utils","title":"Utils","text":"RecurrenceMicrostatesAnalysis.jl has several utilitary functions to help when using the library. These functions allows to simplify the process to implement recurrence analysis to a project, facilitating the set of a threshold, or the preparation of continuous data to be analysed.","category":"page"},{"location":"utils/","page":"Utils","title":"Utils","text":"warning: Warning\nSome function presented in this section was still in development, so these function can change in future versions.","category":"page"},{"location":"utils/#Preparing-a-continuous-data","page":"Utils","title":"Preparing a continuous data","text":"","category":"section"},{"location":"utils/","page":"Utils","title":"Utils","text":"When working with continuous data, it is important to do a discretization, changing the time resolution to improve the available information. prepare is an utilitary function to discretize the data, applying a vicinity parameter to change the data time resolution [10].","category":"page"},{"location":"utils/","page":"Utils","title":"Utils","text":"function lorenz!(du, u, p, t)\n    du[1] = 10.0 * (u[2] - u[1])\n    du[2] = u[1] * (28.0 - u[3]) - u[2]\n    du[3] = u[1] * u[2] - (8 / 3) * u[3]\nend\n\nusing DifferentialEquations, RecurrenceMicrostatesAnalysis\nu0 = [1.0; 0.0; 0.0];\ntspan = (0.0, 1000.0);\nprob = ODEProblem(lorenz!, u0, tspan);\nsol = solve(prob);\n\ndata_prepared = prepare(sol, 0.2)","category":"page"},{"location":"utils/","page":"Utils","title":"Utils","text":"info: Info\nIt is possible to see the difference between the data solution and the prepareted data when we make a RP. (Image: RP without vicinity application and with vicinity)","category":"page"},{"location":"utils/","page":"Utils","title":"Utils","text":"The prepare function can also apply a transient phase to the data, using the kword transient, and define the data length, using the kword K.","category":"page"},{"location":"utils/","page":"Utils","title":"Utils","text":"data_prepared = prepare(sol, 0.2; transient = 6000, K = 1000)","category":"page"},{"location":"utils/#Finding-threshold","page":"Utils","title":"Finding threshold","text":"","category":"section"},{"location":"utils/","page":"Utils","title":"Utils","text":"The threshold is a free parameter that need to be defined by the user when working with RP, RQA, or RMA. Using the principle of maximizing the recurrence entropy, we build a function to estimate a good value for threshold [10]. The find_parameters function returns a Float64 value to be used as threshold and the maximazed entropy. It is important to note that this function can be a little slower, since it needs to compute a recurrence motif distributions for each threshold in some interval.","category":"page"},{"location":"utils/","page":"Utils","title":"Utils","text":"th, s = find_parameters(data_prepared, 3)","category":"page"},{"location":"api/#Public-API","page":"Public API","title":"Public API","text":"","category":"section"},{"location":"api/#Distribution","page":"Public API","title":"Distribution","text":"","category":"section"},{"location":"api/#Main.RecurrenceMicrostatesAnalysis.distribution","page":"Public API","title":"Main.RecurrenceMicrostatesAnalysis.distribution","text":"Based on Recurrence Plot\n\n    distribution([x], [parameters], n::Int; kwargs...)\n\nCompute the distribution of recurrence microstates probabilities from the dataset x. The input parameters consists of the constant values used to calculate the recurrence between two points. n is an integer that represents the length of motifs side.\n\nInput:\n\n[x]: input dataset.\n[parameter]: set of parameters used to compute the recurrence microstate distribution.\nn: microstate size.\n\nOutput: this function can return a vector, an array or a dictionary based on the number of possible microstates and the setting of run_mode or sampling_mode.\n\n\n\n\n\nBased on Cross-Recurrence Plot\n\ndistribution([x], [y], parameters, n::Int; kwords...)\n\nCompute the distribution of recurrence microstates probabilities from the datasets x and y. The input parameters consists of the constant values used to calculate the recurrence between two points. n is an integer that represents the length of motifs side.\n\nInput:\n\n[x]: input dataset.\n[y]: input dataset.\n[parameter]: set of parameters used to compute the recurrence microstate distribution.\nn: microstate size.\n\nOutput: this function can return a vector, an array or a dictionary based on the number of possible microstates and the setting of run_mode or sampling_mode.\n\n\n\n\n\nUsing DifferencialEquations.jl\n\ndistribution([solution], parameters, n::Int, vicinity::Union{Int, Float64}; kwords...)\n\nCompute the distribution of recurrence microstates probabilities from the solution of a differencial equation solved by  the library DifferencialEquations.jl. The input parameters consists of the constant values used to calculate the recurrence  between two points. n is an integer that represents the length of motifs side. vicinity is the time separation used to discretize a continuous problem.\n\nInput:\n\n[solution]: solution returned by the library DifferentialEquations.jl.\n[parameter]: set of parameters used to compute the recurrence microstate distribution.\nn: microstate size.\nσ: sampling parameter; it defines the time resolution of discretized data.\n\nSpecific kwargs:\n\ntransient: defines an interval of time that will be ignored, and taked as a transient.\nK: defines the maximum size of the result time series.\n\nOutput: this function can return a vector, an array or a dictionary based on the number of possible microstates and the setting of run_mode or sampling_mode.\n\n\n\n\n\nMain\n\ndistribution([x], [y], parameters, [structure]; kwords...)\n\nCompute the distribution of recurrence microstates probabilities from the datasets x and y. The input parameters consists of the constant values used to calculate the recurrence between two points. Meanwhile, the input structure is a vector where each element represents a side of the motif.\n\nInput:\n\n[x]: input dataset.\n[y]: input dataset.\n[parameter]: set of parameters used to compute the recurrence microstate distribution.\n[structure]: microstate structure.\n\nkwargs:\n\nshape: microstate shape. Can be :square, :triangle, :pair, :diagonal or :line. (default :square)\nrun_mode: define the output format. It can be :vect for a Vector{Float64}, or :dict for a Dict{Int, Float64}. If you are you sampling_mode :columnwise`\nsampling_mode: define how the library will take motifs in a RP. Can be :full, :random, :triangleup, :columnwise or :columnwise_full. (default :random)\nnum_samples: number of samples used to compute the distribution. Can be an Int value or a Float64, which will be interpretad as a proportion of the total population of microstates in a RP. (This is not required for :full and :columnwise_full sampling modes)\nthreads: set if library will use asyncronous jobs or not.\nmetric: metric defined using the library Distances.jl.\nfunc: recurrence function.\n\nOutput: this function can return a vector, an array or a dictionary based on the number of possible microstates and the setting of run_mode or sampling_mode.\n\n\n\n\n\n","category":"function"},{"location":"api/#RQA","page":"Public API","title":"RQA","text":"","category":"section"},{"location":"api/#Main.RecurrenceMicrostatesAnalysis.rrate","page":"Public API","title":"Main.RecurrenceMicrostatesAnalysis.rrate","text":"rrate([probs])\n\nCompute the approximated recurrence rate of a RP from a probability distribution of recurrence microstates. Here, we use a relation between the mean recurrence rate of each motif and the desired value. It can be written as\n\nRR approx sum_I = 0^N mathbfp_I^(k)left(frac1k^2sum_i=1^ksum_j=1^k mathbfM_ij^(I)right)\n\nwhere mathbfM_ij^(I) is the motif structure.\n\nInput:\n\n[probs]: the vector of probabilities mathbfp^(k) computed using distribution(...).\n\nOutput: returns the recurrence rate as a Float64.\n\n\n\n\n\nrrate([x], [parameters], n::Int; shape::Symbol, sampling_mode::Symbol, r::Float64})\n\nCompute the approximated recurrence rate of a Recurrence Plot from a data [x] using a probability distribution of recurrence microstates computed from it.\n\nInput:\n\n[x]: input data.\n[parameter]: set of parameters used to compute the recurrence microstate distribution.\nn: microstate size.\nshape (kwarg): shape of the used motifs. :square by default, it can be: :square, :triangle, :pair, :diagonal, :line.\nsampling_mode (kwarg): sampling mode used. :random by default, it can be: :square, :triangle, :pair, :diagonal, :line.\nr (kwarg): ratio of the total number of microstates to be sampled for the histogram. (default r = 0.05)\n\nOutput: returns the recurrence rate as a Float64.\n\n\n\n\n\n","category":"function"},{"location":"api/#Main.RecurrenceMicrostatesAnalysis.rentropy","page":"Public API","title":"Main.RecurrenceMicrostatesAnalysis.rentropy","text":"rentropy([probs]; [ignore_motifs])\n\nCompute the recurrence entropy, as proposed by [4].\n\nInput:\n\n[probs]: a Vector{Float64} returned by the function distribution(...).\n[ignore_motifs] (kwarg): list of motifs to ignore.\n\nOutput: return the recurrence entropy as a Float64.\n\n\n\n\n\n","category":"function"},{"location":"api/#Main.RecurrenceMicrostatesAnalysis.determinism","page":"Public API","title":"Main.RecurrenceMicrostatesAnalysis.determinism","text":"determinism(rr::Float64, [probs])\n\nEstimate the determinism from a distribution. If the distribution has 512 elements, the function will consider square motifs, computing determinism using\n\nI^(beta) = frac1RR(2mathbfM_12^(beta) + 4mathbfM_13^(beta) + 8mathbfM_21^(beta) + 16 + 32mathbfM_23^(beta) + 64mathbfM_31^(beta) + 128mathbfM_32^(beta))\n\nwhere mathbfM is the motif structure. It defines a class of motifs (C_L) ni I^(beta) that we use to estimate DET:\n\nDET approx 1 - frac1RRsum_Iin (C_L) mathbfp^(3)_I\n\ndist = distribution(data, th, 3)\nrr = rrate(dist)\ndet = determinism(rr, dist)\n\nIf the distribution has 8 elements, this function will consider line motifs, which makes the process simpler. In this case, we just need the motif with I = 2:\n\nDET approx 1 - fracmathbfp^(3)_2RR\n\ndist = distribution(data, th, 3; shape = :line)\nrr = rrate(dist)\ndet = determinism(rr, dist)\n\nInput:\n\nrr: recurrence rate.\n[probs]: a Vector{Float64} returned by the function distribution(...).\n\nOutput: returns the determinism as a Float64.\n\n\n\n\n\ndeterminism([x], threshold::Float64; r::Float64)\n\nEstimate the determinism from a data [x]` using a probability distribution and a RR computed from it. \n\nInput:\n\n[x]: input data.\n[parameter]: set of parameters used to compute the recurrence microstate distribution.\nr (kwarg): ratio of the total number of microstates to be sampled for the histogram. (default r = 0.05)\n\nOutput: returns a Tuple{Float64, Float64}.\n\nlam: laminarity as Float64.\nrr: recurrence rate as Float64.\n\n\n\n\n\n","category":"function"},{"location":"api/#Main.RecurrenceMicrostatesAnalysis.laminarity","page":"Public API","title":"Main.RecurrenceMicrostatesAnalysis.laminarity","text":"laminarity(rr::Float64, [probs])\n\nEstimate the laminarity from a distribution. If the distribution has 512 elements, the function will consider square motifs, computing laminarity using\n\nI^(beta) = frac1RR(2 + 8mathbfM_21^(beta) + 16mathbfM_22^(beta) + 32mathbfM_23^(beta) + 64mathbfM_31^(beta) + 128mathbfM_32^(beta) + 256mathbfM_33^(beta))\n\nwhere mathbfM is the motif structure. It defines a class of motifs (C_L) ni I^(beta) that we use to estimate LAM:\n\nLAM approx 1 - frac1RRsum_Iin (C_L) mathbfp^(3)_I\n\ndist = distribution(data, th, 3)\nrr = rrate(dist)\nlam = laminarity(rr, dist)\n\nIf the distribution has 8 elements, this function will consider line motifs, which makes the process simpler. In this case, we just need the motif with I = 2:\n\nLAM approx 1 - fracmathbfp^(3)_2RR\n\ndist = distribution(data, th, 3; shape = :line)\nrr = rrate(dist)\nlam = laminarity(rr, dist)\n\nInput:\n\nrr: recurrence rate.\n[probs]: a Vector{Float64} returned by the function distribution(...).\n\nOutput: returns the laminarity as a Float64.\n\n\n\n\n\nlaminarity([x], threshold::Float64; r::Float64)\n\nEstimate the laminarity from a data [x]` using a probability distribution and a RR computed from it. \n\nInput:\n\n[x]: input data.\n[parameter]: set of parameters used to compute the recurrence microstate distribution.\nr (kwarg): ratio of the total number of microstates to be sampled for the histogram. (default r = 0.05)\n\nOutput: returns a Tuple{Float64, Float64}.\n\nlam: laminarity as Float64.\nrr: recurrence rate as Float64.\n\n\n\n\n\n","category":"function"},{"location":"api/#Utilitary-Functions","page":"Public API","title":"Utilitary Functions","text":"","category":"section"},{"location":"api/#Main.RecurrenceMicrostatesAnalysis.prepare","page":"Public API","title":"Main.RecurrenceMicrostatesAnalysis.prepare","text":"prepare([solution], σ::Union{Float64, Int}; transient::Int, K::Int)\n\nPrepare a problem solved by the library DifferentialEquations.jl to be used in RecurrenceMicrostatesAnalysis.jl.  This function applies the sampling parameter (σ) to discretize the continuous time series, as proposed by [10].\n\nInput:\n\n[solution]: solution returned by the library DifferentialEquations.jl.\nσ: sampling parameter; it defines the time resolution of discretized data.\ntransient (kwarg): number of points, without application of sampling, that will be ignored.\nK (kwarg): maximum length of the returned data series.\n\nOutput:\n\ndata: returns the prepared data in the format of a Matrix{Float64}. Each row represents a system component, and each column represents a time step.\n\n\n\n\n\n","category":"function"},{"location":"api/#Main.RecurrenceMicrostatesAnalysis.find_parameters","page":"Public API","title":"Main.RecurrenceMicrostatesAnalysis.find_parameters","text":"find_parameters([x], n::Int; r::Float64 = 0.05, ε_max_range = 0.5)\n\nThis function calculates the maximum microstate entropy for the RP of the input time series given the microstate size n and the input ratio r of the total number of microstates.\n\nInput:\n\n[x]: input data.\nn: microstate size.\nr (kwarg): ratio of the total number of microstates to be sampled for the histogram (default r = 0.05)\nε_max_range (kwarg): percentage of the maximum distance to be used as the range in the process. (default ε_max_range = 0.5)\nfraction (kwarg): iteration fraction. (default fraction = 5)\nshape (kwarg): motif shape. (default shape = :square)\n\nOutput: (is a Tuple{Float64, Float64})\n\nεopt: the value of the vicinity parameter that maximizes the recurrence microstates entropy.\nSmax: maximum recurrence microstates entropy for the input time series.\n\n\n\n\n\n","category":"function"},{"location":"api/#Recurrence-Functions","page":"Public API","title":"Recurrence Functions","text":"","category":"section"},{"location":"api/#Main.RecurrenceMicrostatesAnalysis.recurrence","page":"Public API","title":"Main.RecurrenceMicrostatesAnalysis.recurrence","text":"recurrence([x], [y], parameters, idx::AbstractVector{Int}, metric::Metric, dim::AbstractVector{Int})\n\nCompute the recurrence between two position defined by idx of the datasets x and y. parameters defines which type of recurrence it will use, like the standard recurrence and the recurrence with corridor threshold. metric defines the norm applied to the datasets, it uses the library Distances.jl to compute the metric. dim is just used for high-dimensional problems, such as images. A recurrence function is a function of the form\n\nR_ij = Theta(varepsilon - mathbfx_i - mathbfy_j)\n\nwhere Theta is the Heaviside function, cdot denotes an appropriate norm, and varepsilon is  a threshold parameter that defines the maximum distance between two points for them to be considered varepsilon-recurrent to each other.\n\n#       Examples\n#   For a 2D recurrence space.\n@inline function recurrence(...)\n    return @inbounds evaluate(metric, x[idx[1]], y[idx[2]]) <= threshold\nend\n\n#   For a recurrence tensor space (generalization to spatial data)\n@inline function recurrence(...)\n    return @inbounds evaluate(metric, view(x, :, view(idx, 1:dim[1])), view(y, :, view(idx, dim[1]+1:dim[1] + dim[2]))) <= threshold\nend\n\nInput:\n\n[x]: a dataset.\n[y]: a dataset.\n[parameter]: set of parameters used to compute the recurrence microstate distribution, i.e., the value of varepsilon.\n[idx]: vector of indeces from [x] and [y] to calculate the recurrence between them.\nmetric: metric from Distances.jl used to compute the recurrence. It defines the norm cdot.\n[dim]: number of dimensions derived from [x] and [y]. If you are using a time series it is usually [1,1].\n\nOutput: Recurrence functions return true when we have a recurrence, and false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"theory/#A-Brief-Theoretical-Review","page":"Theoretical Overview","title":"A Brief Theoretical Review","text":"","category":"section"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"We do here a brief review about the recurrence field. If you are new in this area, we sincerelly expects that this review helps you 😄. If you want a more formal review, please read the publication \"Recurrence plots for the analysis of complex systems\" [1].","category":"page"},{"location":"theory/#Recurrence-Plots","page":"Theoretical Overview","title":"Recurrence Plots","text":"","category":"section"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"Recurrence Plots (RPs) were introduced by Eckmann et al. at 1987 [2]. Given a trajectory mathbfx_i in mathbbR^m, with iin12K and K being the length of the analyzed time series, we define the RP as a graphical representation  based on the recurrence matrix define by mathbfR_ij = Theta(varepsilon - mathbfx_i - mathbfx_j) where cdot denotes an appropriate norm, and varepsilon is a threshold parameter that defines the maximum distance between two points for them to be considered varepsilon-recurrent to each other.","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"In Julia, it is possible to build a RP using the library RecurrenceAnalysis.jl (documentation here). For example:","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"using Distributions, RecurrenceAnalysis, CairoMakie\n\ndata = rand(Uniform(0, 1), 1000)\nr_matrix = RecurrenceMatrix(data, 0.27)\nfig, ax, rp = heatmap(r_matrix, colormap = :binary)","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"(Image: RP of a uniform distribution.)","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"By definition, we have for a RP that mathbfR_ii = 1, which the main diagonal of a recurrence matrix is filled with recurrences, being called as line of identity (LOI). The structures presented in a RP can have crucial tips about a system, in a way that some system can be caracterized by its topology and texture [2, 3].","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"Talking about RQA and RMA, we just have interest about the RP texture, that is the base for these two analysis metodologies. Since we do not will really formalize this topic, it is recommended to you read the original paper, available here.","category":"page"},{"location":"theory/#Recurrence-Quantification-Analysis","page":"Theoretical Overview","title":"Recurrence Quantification Analysis","text":"","category":"section"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"Recurrence Quantification Analysis (RQA) has become a standard tool for extracting nonlinear characteristics from time series. It relies on specific recurrence structures within Recurrence Plots (RPs), such as diagonal line lengths that are typically associated with deterministic dynamics. There are several quantification measures defined in the literature, and we strongly recommend you to read the book \"Recurrence Quantification Analysis, Theory and Best Practices\" [3]. In this review we just will talk about recurrence rate, determinism, laminarity and recurrence entropy, since they are the quantifiers that can be computed using RMA.","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"The recurrence rate (RR) is the overall density of points within a RP, and calculated as","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"RR = frac1K^2-Ksum_i=1^Ksum_ineq j = 1^K mathbfR_ij","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"It can be used to help calculating dynamical invariants such as correlation sum and correlation dimension. These invariants are importat dynamical properties of a system, and offer meaningful evidence in the search for chaotic behavior.","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"The determinism (DET) also can be seem as a density, similarly to the RR in this regard. However, it is a percentage of points that are part of diagonal lines rather than just the total density. Considering the histogram of diagonal lines length, written as","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"H_D(ell)=sum_ij=1^K(1-mathbfR_i-1j-1)(1-mathbfR_i+l j+l)prod_k=0^ell - 1 mathbfR_i+k j+k","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"DET is defined as","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"DET = fracsum_ell = d_min^K ell H_D(ell)sum_ij = 1^K mathbfR_ij","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"where the parameter d_min sets the minimum length of the diagonal lines, being usual to use d_min = 2. DET is one of the most used in the search for deterministic behavior, since diagonal lines imply that entire sequences of states mathbfx_i mathbfx_i+1  mathbfx_i+ell -1 and mathbfx_j mathbfx_j+1  mathbfx_j+ell -1 are recurrent to each other, not only single points. This translates to the system repeating a pattern for long periods, since ell points recurring means similar system behavior for ell time steps. The nonlinear quantifier DET can also detect transitions between chaotic to regular behaviour, and vice-versa. This property can be used to search for bifurcations induced by some parameter drift in a time series, for which the DET will display an increase in value.","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"LAM is analogous to DET, but it is defined for vertical/horizontal lines, which completely changes its interpretation. It is defined as","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"LAM = fracsum_ell = v_min^K ell H_V(ell)sum_ij = 1^K mathbfR_ij","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"with","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"H_V(ell)=sum_ij=1^K(1-mathbfR_ij-1)(1-mathbfR_i j+l)prod_k=0^ell - 1 mathbfR_i j+k","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"and the parameter v_min being similar to d_min. This RQA captures information about laminar behaviour. It has this interpretation because for a straight line of length ell to form in the RP, a single state mathbfx_i has to recur with ell other different states mathbfx_j  mathbfx_j+ell-1. As a consequence, the system has to stay close to a single state for ell time steps, i.e., the longer the line, the more laminar the system is. It has been shown that LAM is also able to capture dynamical transitions, much like DET, but usually even between different chaotic regimes. Henceforth, this is also a very relevant nonlinear measure extracted from RPs.","category":"page"},{"location":"theory/#Recurrence-Microstates-Analysis","page":"Theoretical Overview","title":"Recurrence Microstates Analysis","text":"","category":"section"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"The Recurrence Microstates Analysis (RMA) has been introduced in 2018 (read the paper here)[4], defining a new concept of microstates for a RP that is associated with features of the dynamics of the time series. This concept was used to define the quantifier of recurrence entropy (RME), written as","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"RME = - sum_I=0^N p_I^(k) ln p_I^(k)","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"where I is the microstate index, k is its size, N the total amount of microstates that can be exist, being N = 2^k^2 for square motifs and p_I^(k) the probability to found a specific microstate in a system, given by its distribution. In the following years it was shown that these structures and their distributions could be used in other applications, such as characterizationg of random dynamical systems (Yoshito Hirata, 2021) [5], training neural networks (G. S. Spezzatto et al., 2024) [6], new quantifier, such as involution simmetry (G. Marghoti et al., 2024) [7] or disorder (not published yet), and estimation of RQA density-based measures (F. E. L. da Cruz et al., 2025) [8].","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"The goal of the RecurrenceMicrostatesAnalysis.jl library is to make this research field fast and easy to use, serving as a powerful tool for advancing new research and practical applications, such as in machine learning 😉.","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"We will explain better how compute motifs without explictly construct a RP in motifs: shapes and sampling. About how estimate RQA using RMA, we use the expression proposed in [8]:","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"DET approx 1 - fracmathbfd^(1)cdotmathcalR^(3)cdot mathbfp^(3)RR","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"DET approx 1 - fracmathbfv^(1)cdotmathcalR^(3)cdot mathbfp^(3)RR","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"The vectors mathbfd and mathbfv are selecting the necessary terms from the resulting vector mathcalR^(3)cdot mathbfp^(3). In practice, for DET, the probability of all 64 motifs of the form","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"beginpmatrix 0  xi  xi  xi  1  xi  xi  xi  0  endpmatrix","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"are summed, for all possible combinations of xi. This works for the minimal length of 2, which is the implemented case. Similarly, for LAM, it uses motifs of the form","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"beginpmatrix 0  1  0  xi  xi  xi  xi  xi  xi  endpmatrix ","category":"page"},{"location":"theory/","page":"Theoretical Overview","title":"Theoretical Overview","text":"We optimize this process defining two new motifs shapes: diagonal and line. These shapes are derived from the matrices above, where it is possible to disregard the combination of xi without loss of generality, and use diagonal and lines structures to construct a probability distribution. With this, all motif of the forms presented above can be identified by the diagonal or line motif represented by I = 2.","category":"page"},{"location":"recurrence/#Recurrence-functions","page":"Recurrence functions","title":"Recurrence functions","text":"","category":"section"},{"location":"recurrence/","page":"Recurrence functions","title":"Recurrence functions","text":"Given a trajectory mathbfx_t in mathbbR^m, with t in 1 2  K and K being the length of the analyzed time series, we say that two points i and j from that trajectory are or not recurrent based on a recurrence function. Originally, the recurrence function used for RPs are:","category":"page"},{"location":"recurrence/","page":"Recurrence functions","title":"Recurrence functions","text":"mathbfR_ij = Theta(varepsilon - mathbfx_i - mathbfx_j)","category":"page"},{"location":"recurrence/","page":"Recurrence functions","title":"Recurrence functions","text":"where Theta is the Heaviside function, cdot denotes an appropriate norm, and varepsilon is  a threshold parameter that defines the maximum distance between two points for them to be considered varepsilon-recurrent to each other. However, there are several variations that can be used as recurrence functions, as compiled in [1], and RecurrenceMicrostatesAnalysis.jl aims to provide support for their implementation.","category":"page"},{"location":"recurrence/","page":"Recurrence functions","title":"Recurrence functions","text":"The library include two recurrence functions: the standard, presented above, and a recurrence function with corridor threshold, proposed in [11]. The standard version code is","category":"page"},{"location":"recurrence/","page":"Recurrence functions","title":"Recurrence functions","text":"@inline function recurrence(x::Matrix{Float64}, y::Matrix{Float64}, threshold::Float64, idx::AbstractVector{Int}, metric, _)\n    return @inbounds evaluate(metric, view(x, :, idx[1]), view(y, :, idx[2])) <= threshold\nend","category":"page"},{"location":"recurrence/","page":"Recurrence functions","title":"Recurrence functions","text":"The metric is computed using the Distances.jl library. Here, you can see that the function receives six arguments: the datasets x and y, the threshold, the iterator idx (which is computed by the shape and sampling functions), a metric from Distances.jl, and an ignored parameter that we will discuss later.","category":"page"},{"location":"recurrence/","page":"Recurrence functions","title":"Recurrence functions","text":"The structure of a recurrence function is consistent, so the recurrence function with a corridor threshold — given by the equation below","category":"page"},{"location":"recurrence/","page":"Recurrence functions","title":"Recurrence functions","text":"mathbfR_ij=Theta(mathbfx_i-mathbfx_j-varepsilon_min)cdotTheta(varepsilon_max -mathbfx_i-mathbfx_j) ","category":"page"},{"location":"recurrence/","page":"Recurrence functions","title":"Recurrence functions","text":"was implemented as follows in Julia:","category":"page"},{"location":"recurrence/","page":"Recurrence functions","title":"Recurrence functions","text":"@inline function recurrence(x::Matrix{Float64}, y::Matrix{Float64}, thresholds::Tuple{Float64, Float64}, idx::AbstractVector{Int}, metric, _)\n    distance = @inbounds evaluate(metric, view(x, :, idx[1]), view(y, :, idx[2]))\n    return (distance > thresholds[1] && distance <= thresholds[2])\nend","category":"page"},{"location":"recurrence/","page":"Recurrence functions","title":"Recurrence functions","text":"Note that the only difference between them is the thresholds parameter, which is a Tuple{Float64, Float64} instead of a single Float64. This is because it is a free parameter that can be adapted to your specific use case. So, if you implement a different recurrence function, this approach allows you to easily pass constant parameters.","category":"page"},{"location":"recurrence/","page":"Recurrence functions","title":"Recurrence functions","text":"It is also possible to adapt this for the spatial generalization of recurrence plots, as proposed in [9]. For this purpose, we use the previously ignored parameter, which represents the number of dimensions of x and y — more precisely, [dims(x) - 1, dims(y) - 1]. This allows us to access the iterator correctly and to unpack each component vector from a spatial problem using a view:","category":"page"},{"location":"recurrence/","page":"Recurrence functions","title":"Recurrence functions","text":"@inline function recurrence(x::AbstractArray, y::AbstractArray, threshold::Float64, idx::AbstractVector{Int}, metric, dim::AbstractVector{Int})\n    return @inbounds evaluate(metric, view(x, :, view(idx, 1:dim[1])), view(y, :, view(idx, dim[1]+1:dim[1] + dim[2]))) <= threshold\nend\n\n@inline function recurrence(x::AbstractArray, y::AbstractArray, thresholds::Tuple{Float64, Float64}, idx::AbstractVector{Int}, metric, dim::AbstractVector{Int})\n    distance = @inbounds evaluate(metric, view(x, :, view(idx, 1:dim[1])), view(y, :, view(idx, dim[1]+1:dim[1] + dim[2])))\n    return (distance > thresholds[1] && distance <= thresholds[2])\nend","category":"page"},{"location":"quickstart/#Recurrence-Motifs-Distributions-in-One-Minute","page":"Quick Start","title":"Recurrence Motifs Distributions in One Minute","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"The following code is an example of how to use RecurrenceMicrostatesAnalysis.jl to compute the motif distribution of a uniform distribution. Try pasting it into the REPL prompt 😉.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"##  Install everything that we need\nusing Pkg; Pkg.add(\"Distributions\"); Pkg.add(\"RecurrenceMicrostatesAnalysis\")\nusing Distributions                             #   For generate our uniform distribution\nimport RecurrenceMicrostatesAnalysis as RMA     #   !! Import RecurrenceMicrostatesAnalysis.jl\n\n##  Generate our data\ndata = rand(Uniform(0, 1), 1000)\n\n##  Square motif side\nn = 3\n\n##  Compute the threshold that maximize the recurrence entropy.\nth, s = find_parameters(data, n)\n\n##  Compute the recurrence motif probabilities distribution.\ndist = distribution(data, th, n)","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"The output will be a set of 512 probabilities. The distribution function samples 5 of all motifs available in the RP, regardless of overlap or repetition. Each value represents the probability of encountering a motif with a decimal representation I within the RP.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"It is not necessary to compute the Recurrence Plot (RP), as the library calculates the recurrences internally without needing to construct one explicitly.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"note: Note\nIt is important to remember that Julia's indexing starts at 1 instead of 0. Therefore, in the library, we define I = i - 1, where i is the Julia's index.","category":"page"},{"location":"quickstart/#Easy-RQA-Estimation","page":"Quick Start","title":"Easy RQA Estimation","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"One of the main goals of RecurrenceMicrostatesAnalysis.jl is to provide high performance when estimating typical RQA quantifiers, such as determinism (DET) and laminarity (LAM). This process is very simple, as you can see in the following code, give it a try 😁.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"entropy = rentropy(dist)        #   Recurrence entropy\nrr = rrate(dist)                #   Recurrence rate\ndet = determinism(rr, dist)     #   Determinism\nlam = laminarity(rr, dist)      #   Laminarity","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"It is also possible to skip computing the recurrence distribution by using an alternative overload of the determinism and laminarity functions.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"det = determinism(data, th)\nlam = laminarity(data, th)","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Application-with-Flux.jl","page":"Examples","title":"Application with Flux.jl","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Flux is a user-friendly machine learning library in Julia that provides a wide range of functionalities. In this example, we demonstrate how to use Flux.jl together with RecurrenceMicrostatesAnalysis.jl to train a multi-layer perceptron (MLP) to classify a dynamical system, based on [6].","category":"page"},{"location":"examples/#Importing-Required-Packages","page":"Examples","title":"Importing Required Packages","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Flux\nusing DifferentialEquations\nusing RecurrenceMicrostatesAnalysis","category":"page"},{"location":"examples/#Generating-Data-from-the-Lorenz-System","page":"Examples","title":"Generating Data from the Lorenz System","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We use a Lorenz system integrated with DifferentialEquations.jl as our data source:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"function lorenz(σ, ρ, β; u0 = rand(3), tspan = (0.0, 5000.0))\n    function lorenz!(du, u, p, dt)\n        x, y, z = u\n        \n        du[1] = σ * (y - x)\n        du[2] = x * (ρ - z) - y\n        du[3] = x * y - β * z\n    end\n\n    prob = ODEProblem(lorenz!, u0, tspan)\n    sol = solve(prob, dt = 0.00001)\n\n   ##   Apply the vicinity (important!)\n   return prepare(sol, 0.2; transient = 40000, K = 500)\nend","category":"page"},{"location":"examples/#Experiment-Settings","page":"Examples","title":"Experiment Settings","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"ρ_cls = [26.0, 26.5, 27.0, 27.5, 28.0, 28.5, 29.0, 29.5, 30.0]      # Our classes\nnum_samples_to_test = 100           # Samples to test\nnum_samples_to_train = 400          # Samples to train\n\nepoches = 80            # Epoches to train\nlearning_rate = 0.002   # Learning rate\n\nmotif_n = 3             # Motif size","category":"page"},{"location":"examples/#Defining-the-Model","page":"Examples","title":"Defining the Model","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"model = Chain(\n    Dense(2^(motif_n * motif_n) + 2 => 512, identity),\n    Dense(512 => 256, selu),\n    Dense(256 => 64, selu),\n    Dense(64 => length(ρ_cls)),\n    softmax\n)\n\nmodel = f64(model)      # We use Float64 precision 😄","category":"page"},{"location":"examples/#Preparing-the-Dataset","page":"Examples","title":"Preparing the Dataset","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Our input features include the threshold, recurrence entropy, and recurrence distribution:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"data_train = zeros(Float64, 2^(motif_n * motif_n) + 2, num_samples_to_train, length(ρ_cls))\ndata_test = zeros(Float64, 2^(motif_n * motif_n) + 2, num_samples_to_test, length(ρ_cls))\n\nlabels_train = zeros(Float64, num_samples_to_train, length(ρ_cls))\nlabels_test = zeros(Float64, num_samples_to_test, length(ρ_cls))\n\nfor j in eachindex(ρ_cls)\n\n    labels_train[:, j] .= ρ_cls[j]\n    labels_test[:, j] .= ρ_cls[j]\n\n    for i in 1:num_samples_to_train\n        serie = lorenz(10.0, ρ_cls[j], 8.0/3.0)\n        th, s = find_parameters(serie, motif_n)\n        data_train[1, i, j] = th\n        data_train[end, i, j] = s\n\n        data_train[2:end-1, i, j] .= distribution(serie, th, motif_n)\n    end\n\n    for i in 1:num_samples_to_test\n        serie = lorenz(10.0, ρ_cls[j], 8.0/3.0)\n        th, s = find_parameters(serie, motif_n)\n        data_test[1, i, j] = th\n        data_test[end, i, j] = s\n\n        data_test[2:end-1, i, j] .= distribution(serie, th, motif_n)\n    end\nend\n\n##  Reshape to match the expected input format for Flux.\ndata_train = reshape(data_train, 2^(motif_n * motif_n) + 2, num_samples_to_train *  length(ρ_cls))\ndata_test = reshape(data_test, 2^(motif_n * motif_n) + 2, num_samples_to_test * length(ρ_cls))\n\nlabels_train = reshape(labels_train, num_samples_to_train * length(ρ_cls))\nlabels_test = reshape(labels_test, num_samples_to_test * length(ρ_cls))","category":"page"},{"location":"examples/#Training-the-MLP","page":"Examples","title":"Training the MLP","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"labels_train = Flux.onehotbatch(labels_train, ρ_cls)\nlabels_test = Flux.onehotbatch(labels_test, ρ_cls)\n\nloader = Flux.DataLoader((data_train, labels_train), batchsize = 32, shuffle = true)\nopt = Flux.setup(Flux.Adam(learning_rate), model)\n\nfor epc in 1:epoches\n    for (x, y) in loader\n        _, grads = Flux.withgradient(model) do m\n            y_hat = m(x)\n            Flux.crossentropy(y_hat, y)\n        end\n\n        Flux.update!(opt, model, grads[1])\n    end\nend","category":"page"},{"location":"examples/#Evaluation","page":"Examples","title":"Evaluation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We evaluate the trained model using a confusion matrix and obtain an accuracy of 91%: (Image: Confusion Matrix)","category":"page"},{"location":"#A-Julia-library-for-analyzing-dynamical-systems-with-recurrence-microstates","page":"Welcome","title":"A Julia library for analyzing dynamical systems with recurrence microstates","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"Recurrence Microstates Analysis (RMA) is an advanced approach that generalizes the analysis of recurrence structures by capturing the statistical properties of recurrence motifs. RecurrenceMicrostatesAnalysis.jl is an efficient Julia package for performing RMA, offering support for a wide range of motif shapes, flexible sampling strategies, and comprehensive distribution computation capabilities. Furthermore, the library features an optimized pipeline for estimating standard RQA quantifiers, with significantly reduced memory and computational requirements, making it particularly well-suited for large-scale datasets.","category":"page"},{"location":"#Installation","page":"Welcome","title":"Installation","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"Download Julia 1.8 or later, preferably the current stable release. ","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"You can add RecurrenceMicrostatesAnalysis.jl using Julia's package manager. In the Julia prompt, you can use the following code snippets:","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"using Pkg\nPkg.add(\"RecurrenceMicrostatesAnalysis\")","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"or, in Pkg REPL mode write:","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"] add RecurrenceMicrostatesAnalysis","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"todo: GitHub\nRecurrenceMicrostatesAnalysis.jl is an open-source library available at GitHub repository DynamicsUFPR/RMA.jl. If you have found this library useful, please consider starring it on GitHub 😉.","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"We also recommend you to import the library as","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"import RecurrenceMicrostatesAnalysis as RMA","category":"page"},{"location":"#Learning-RMA","page":"Welcome","title":"Learning RMA","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"If you have worked with recurrence microstates analysis before, the Quick Start page offers a brief guide on how to apply the RecurrenceMicrostatesAnalysis.jl to time series data and dynamical systems.","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"If you haven't, then you might prefer the Theoretical Overview page, which provides a quick and simple introduction about the recurrence microstates field. The rest of the guide explains how to use the library to compute recurrence motifs probability distributions and calculate common recurrence quantifiers, along with descriptions of all available configuration options. We also include the Utils page, which covers utility functions to simplify the use of RecurrenceMicrostatesAnalysis.jl, and the Performance Tips page, where we discuss how to improve the library’s usage performance.","category":"page"}]
}
